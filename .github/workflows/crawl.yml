name: Email Scraper Workflow

on:

  workflow_dispatch:

jobs:
  email-scraping:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pandas scrapy validators dropbox

      # Step 4: Download file from Dropbox
      - name: Download file from Dropbox
        env:
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
        run: |
          python - <<EOF
          import dropbox
          import os

          ACCESS_TOKEN = os.getenv("DROPBOX_ACCESS_TOKEN")
          if not ACCESS_TOKEN:
              raise ValueError("Dropbox Access Token is not set.")

          dbx = dropbox.Dropbox(ACCESS_TOKEN)
          DROPBOX_FILE_PATH = "/Masatsugu Shimizu/emailcrawlerData/500.csv"
          LOCAL_FILE_PATH = "500.csv"

          try:
              with open(LOCAL_FILE_PATH, "wb") as f:
                  metadata, res = dbx.files_download(DROPBOX_FILE_PATH)
                  f.write(res.content)
              print(f"Downloaded {DROPBOX_FILE_PATH} to {LOCAL_FILE_PATH}")
              print(f"::set-output name=down_file::{os.path.abspath(LOCAL_FILE_PATH)}")
          except Exception as e:
              print(f"Error downloading file: {e}")
              raise
          EOF

      # Step 5: Run Email to URL Script
      - name: Run Email to URL Script
        env:
          FILE_PATH: ${{ steps.download.outputs.down_file }}
        run: python EmailToURL.py

      # Step 6: Run Scrapy Crawler
      - name: Run Scrapy Crawler
        run: scrapy crawl combined_spider -o artifacts/500_scraped.csv --loglevel INFO

      # Step 7: Clean the scraped data
      - name: Clean the scraped data
        run: python clean.py

      # Step 8: Upload cleaned file back to Dropbox
      - name: Upload file to Dropbox
        env:
          DROPBOX_ACCESS_TOKEN: ${{ secrets.DROPBOX_ACCESS_TOKEN }}
        run: |
          python - <<EOF
          import dropbox
          import os

          ACCESS_TOKEN = os.getenv("DROPBOX_ACCESS_TOKEN")
          if not ACCESS_TOKEN:
              raise ValueError("Dropbox Access Token is not set.")

          dbx = dropbox.Dropbox(ACCESS_TOKEN)
          LOCAL_FILE_PATH = "500_updated.csv"
          DROPBOX_FILE_PATH = "/Masatsugu Shimizu/emailcrawlerData/500_updated.csv"

          try:
              with open(LOCAL_FILE_PATH, "rb") as f:
                  dbx.files_upload(f.read(), DROPBOX_FILE_PATH, mode=dropbox.files.WriteMode("overwrite"))
              print(f"Uploaded {LOCAL_FILE_PATH} to {DROPBOX_FILE_PATH}")
          except Exception as e:
              print(f"Error uploading file: {e}")
              raise
          EOF

      # Step 9: Upload cleaned CSV to GitHub Artifact (Optional)
      - name: Upload cleaned CSV to GitHub Artifact
        uses: actions/upload-artifact@v3
        with:
          name: cleaned-email-data
          path: 500_updated.csv
